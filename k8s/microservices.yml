apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: zerofiltretech-${env_name}
  name: zerofiltretech-blog-${env_name}
spec:
  minReadySeconds: 30
  progressDeadlineSeconds: 300
  replicas: ${replicas}
  selector:
    matchLabels:
      app: zerofiltretech-blog-${env_name}
  template:
    metadata:
      labels:
        app: zerofiltretech-blog-${env_name}
      annotations:
        vault.hashicorp.com/agent-inject: 'true'
        vault.hashicorp.com/role: 'internal-app'
        vault.hashicorp.com/agent-inject-secret-config: '${env_name}/data/zerofiltre-blog-api'
        vault.hashicorp.com/agent-inject-template-config: |
          {{- with secret "${env_name}/data/zerofiltre-blog-api" -}}
            export SPRING_MAIL_PASSWORD='{{ .Data.data.spring_mail_password }}'
            export SPRING_DATASOURCE_PASSWORD='{{ .Data.data.spring_datasource_password }}'
            export SECURITY_JWT_SECRET='{{ .Data.data.security_jwt_secret }}'
            export GITHUB_CLIENT_SECRET='{{ .Data.data.github_client_secret }}'
            export VIMEO_ACCESS_TOKEN='{{ .Data.data.vimeo_access_token }}'
            export STRIPE_WEBHOOK_SECRET='{{ .Data.data.stripe_webhook_secret }}'
            export STRIPE_SECRET_KEY='{{ .Data.data.stripe_secret_key }}'
            export PRO_PLAN_PRODUCT_ID='{{ .Data.data.pro_plan_product_id }}'
            export PRO_PLAN_PRICE_ID='{{ .Data.data.pro_plan_price_id }}'
            export PRO_PLAN_YEARLY_PRICE_ID='{{ .Data.data.pro_plan_yearly_price_id }}'
            export OVH_PASSWORD='{{ .Data.data.ovh_password }}'
            export OVH_BUCKET_URL='{{ .Data.data.ovh_bucket_url }}'
            export K8S_PROVISIONER_TOKEN='{{ .Data.data.k8s_provisioner_token }}'
            export NOTCHPAY_PRIVATE_KEY='{{ .Data.data.notchpay_private_key }}'
            export NOTCHPAY_HASH='{{ .Data.data.notchpay_hash }}'
            export OPENAI_URL='{{ .Data.data.openai_url }}'
            export OPENAI_API_KEY='{{ .Data.data.openai_api_key }}'
            export OPENAI_ORGANIZATION_ID='{{ .Data.data.openai_organization_id }}'
            export OPENAI_PROJECT_ID='{{ .Data.data.openai_project_id }}'
          {{- end -}}
    spec:
      serviceAccountName: internal-app
      volumes:
        - name: zerofiltretech-blog-${env_name}
          persistentVolumeClaim:
            claimName: zerofiltretech-blog-${env_name}
      containers:
        - name: redis-${env_name}
          image: redis
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 6379
        - name: zerofiltretech-blog-${env_name}
          image: imzerofiltre/zerofiltretech-blog:${tag_number}_${docker_tag_suffix}
          volumeMounts:
            - name: zerofiltretech-blog-${env_name}
              mountPath: /heapdumps
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
          resources:
            requests:
              cpu: ${requests_cpu}
              memory: ${requests_memory}
            limits:
              cpu: ${limits_cpu}
              memory: ${limits_memory}
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            periodSeconds: 300
            timeoutSeconds: 5


# Disabling as readinessProbe is checking the same endpoint as livenessProbe
#           readinessProbe:
#               httpGet:
#                 path: /actuator/health
#                 port: 8080
#               periodSeconds: 30
#               timeoutSeconds: 5

          startupProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 60
            timeoutSeconds: 5
            failureThreshold: 10

          envFrom:
            - configMapRef:
                name: zerofiltre-blog-api

---
apiVersion: v1
kind: Service
metadata:
  namespace: zerofiltretech-${env_name}
  name: zerofiltretech-blog-${env_name}
spec:
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
  selector:
    app: zerofiltretech-blog-${env_name}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: zerofiltretech-${env_name}
  name: zerofiltretech-blog-${env_name}
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    # add an annotation indicating the issuer to use.
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  rules:
    - host: ${api_host}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: zerofiltretech-blog-${env_name}
                port:
                  number: 8080
  tls: # < placing a host in the TLS config will indicate a certificate should be created
    - hosts:
        - ${api_host}
      secretName: blog-api-zerofiltre-ingress-cert # < cert-manager will store the created certificate in this secret.
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: zerofiltretech-${env_name}
  name: zerofiltretech-blog-${env_name}
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 8Gi
  storageClassName: csi-cinder-high-speed
